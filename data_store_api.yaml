
################################################################################
# Author: Steven Pickering                                                     #
# Created On: 01/06/2018                                                       #
# Description: Swagger 2.0 API specification for the National Infrastructure   #
#   Database (NID) component of DAFNI. The NID stores metadata which describes #
#   different datasets and models stored within the database.                  #
################################################################################

#################################################################
# Swagger Definition, Validated Using https://editor.swagger.io #
#################################################################

# Swagger Version

swagger: "2.0"

# Information Block

info:
  version: "1.0"
  title: DAFNI NID API
  description: This will provide the back-end services to manage the NID metadata data catalogue.
  termsOfService: http://www.dafni.ac.uk/api_terms_of_service
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/license-2.0.html
  contact:
    name: DAFNI Support
    email: support@dafni.ac.uk
    url:  http://www.dafni.ac.uk/contact_us
    
# Host Running The API And The Relative PAth For API Calls

host: nid.dafni.ac.uk
basePath: /

# Communication Schemes That Can Be Used

schemes:
- http
- https

# Consumes JSON Formatted String Via The API Calls

consumes:
- application/json

# Produces JSON Formatted Strings As Out From The API Calls

produces:
- application/json

#  Links To External Documents

externalDocs:
  description: The DAFNI NID API Documentation
  url: http://www.dafni.ac.uk/api/nid

#########
# Paths #
#########

paths:

#===============#
# Organisations #
#===============#

  /organisations/{id}:
    get:
      summary: Display Single Organisation
      description: Queries the database for the specified record and returns a JSON formatted string containg the Organisation
      operationId: ViewOneOrganisation
      tags:
      - Organisation
      parameters:
        - name: id
          in: path
          description: Id of the organisation
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Successfully viewed the Organisation.
          schema:
              $ref: "#/definitions/organisation"
        400:
          description: Invalid organisation request.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        404:
          description: Organisation not found.
          schema:
            $ref: "#/definitions/httpnotfounderror"
        default:
          description: Unexpected error occurred accessing organisation.
          schema:
            $ref: "#/definitions/httperror"

  /organisations:
    get:
      summary: Display All  Organisations
      description: Queries the database for the all records and returns a JSON formatted string
      operationId: ViewAllOrganisation
      tags:
      - Organisation
      responses:
        200:
          description: Successfully viewed the Organisation.
          schema:
              $ref: "#/definitions/organisation"
        400:
          description: Invalid organisation request.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        404:
          description: Organisation not found.
          schema:
            $ref: "#/definitions/httpnotfounderror"
        default:
          description: Unexpected error occurred accessing organisation.
          schema:
            $ref: "#/definitions/httperror"
    post:
      summary: Creates A Organisation Record
      description: Creates a new organisation record from the input fields provided.
      operationId: organisationsCreate
      tags:
      - Organisation
      parameters:
        - in: body
          name: organisation
          description: "Create a new organisation record"
          schema:
             $ref: "#/definitions/organisationName"
      responses:
        200:
          description: The organisation record was created successfully.
          schema:
            $ref: "#/definitions/organisation"
        400:
          description: Invalid organisation create Parameters - no POST body.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        default:
          description: Unexpected error occurred accessing the organisation
          schema:
            $ref: "#/definitions/httperror"    
            
    put:
      summary: Updates A organisation Record
      description: Updates an existing organisation record with the input fields provided for the organisationId provided
      operationId: OrganisationUpdate
      tags:
      - Organisation
      parameters:
        - in: body
          name: organisationId
          description: "Update an existing organisation record"
          schema:
              $ref: "#/definitions/organisation"
      responses:
        200:
          description: The organisation record was updated successfully.
          schema:
              $ref: "#/definitions/organisation"
        400:
          description: Invalid organisation updated Parameters.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        default:
          description: Unexpected error occurred accessing the organisation
          schema:
            $ref: "#/definitions/httperror"   
            

#==========#
# licenses #
#==========#

  /licenses/{id}:
    get:
      summary: Display Single license
      description: Queries the database for the specified record and returns a JSON formatted string containg the license.
      operationId: ViewOnelicense
      tags:
      - License
      parameters:
        - name: id
          in: path
          description: Id of the licence
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Successfully viewed the license.
          schema:
              $ref: "#/definitions/license"
        400:
          description: Invalid license request.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        404:
          description: license not found.
          schema:
            $ref: "#/definitions/httpnotfounderror"
        default:
          description: Unexpected error occurred accessing license.
          schema:
            $ref: "#/definitions/httperror"

  /licenses:
    get:
      summary: Display All license
      description: Queries the database for the all records and returns a JSON formatted string 
      operationId: ViewALLlicense
      tags:
      - License
      responses:
        200:
          description: Successfully viewed the license.
          schema:
              $ref: "#/definitions/license"
        400:
          description: Invalid license request.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        404:
          description: license not found.
          schema:
            $ref: "#/definitions/httpnotfounderror"
        default:
          description: Unexpected error occurred accessing license.
          schema:
            $ref: "#/definitions/httperror"
    post:
      summary: Creates A license Record
      description: Creates a new license record from the input fields provided.
      operationId: licenseCreate
      tags:
      - License
      parameters:
        - in: body
          name: license
          description: "Create a new license record"
          schema:
             $ref: "#/definitions/licenseWithoutId"
      responses:
        200:
          description: The license record was created successfully.
          schema:
            $ref: "#/definitions/license"
        400:
          description: Invalid license create Parameters - no POST body.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        default:
          description: Unexpected error occurred accessing the license
          schema:
            $ref: "#/definitions/httperror"    
            
    put:
      summary: Updates A license Record
      description: Updates an existing license record with the input fields provided for the license provided
      operationId: licenseUpdate
      tags:
      - License
      parameters:
        - in: body
          name: license
          description: "Update an existing license record"
          schema:
              $ref: "#/definitions/license"
      responses:
        200:
          description: The license record was updated successfully.
          schema:
              $ref: "#/definitions/license"
        400:
          description: Invalid license updated Parameters.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        default:
          description: Unexpected error occurred accessing the license
          schema:
            $ref: "#/definitions/httperror"   
            

#========#
# Topics #
#========#

  /topics/{id}:
    get:
      summary: Display Single Topic
      description: Queries the database for the specified record and returns a JSON formatted string containg the topic.
      operationId: ViewOneTopic
      tags:
      - Topic
      parameters:
        - name: id
          in: path
          description: Id of the topic
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Successfully viewed the Topic.
          schema:
              $ref: "#/definitions/topic"
        400:
          description: Invalid Topic request.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        404:
          description: Topic not found.
          schema:
            $ref: "#/definitions/httpnotfounderror"
        default:
          description: Unexpected error occurred accessing topic.
          schema:
            $ref: "#/definitions/httperror"

  /topics:
    get:
      summary: Display All Topic
      description: Queries the database for all records and returns a JSON formatted string
      operationId: ViewAllTopic
      tags:
      - Topic
      responses:
        200:
          description: Successfully viewed the Topic.
          schema:
              $ref: "#/definitions/topic"
        400:
          description: Invalid Topic request.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        404:
          description: Topic not found.
          schema:
            $ref: "#/definitions/httpnotfounderror"
        default:
          description: Unexpected error occurred accessing topic.
          schema:
            $ref: "#/definitions/httperror"
    post:
      summary: Creates A Topic Record
      description: Creates a new topic record from the input fields provided.
      operationId: TopicCreate
      tags:
      - Topic
      parameters:
        - in: body
          name: topic
          description: "Create a new topic record"
          schema:
             $ref: "#/definitions/topic"
      responses:
        200:
          description: The metadata record was created successfully.
          schema:
            $ref: "#/definitions/topic"
        400:
          description: Invalid metadata create Parameters - no POST body.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        default:
          description: Unexpected error occurred accessing the metadata
          schema:
            $ref: "#/definitions/httperror"    
            
    put:
      summary: Updates A Topic Record
      description: Updates an existing topic record with the input fields provided for the topicId provided
      operationId: TopicUpdate
      tags:
      - Topic
      parameters:
        - in: body
          name: topicId
          description: "Update an existing topic record"
          schema:
              $ref: "#/definitions/topic"
      responses:
        200:
          description: The metadata record was updated successfully.
          schema:
              $ref: "#/definitions/topic"
        400:
          description: Invalid metadata updated Parameters.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        default:
          description: Unexpected error occurred accessing the metadata
          schema:
            $ref: "#/definitions/httperror"   
   
#==========#
# Contacts #
#==========#

  /contacts/{id}:
    get:
      summary: Display Single Contact
      description: Queries the database for the specified record and returns a JSON formatted string containg the point of contact
      operationId: ViewOneContact
      tags:
      - Contacts
      parameters:
        - name: id
          in: path
          description: Id of the contact
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Successfully viewed the Contact.
          schema:
              $ref: "#/definitions/pointofcontactWithId"
        400:
          description: Invalid Topic request.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        404:
          description: Topic not found.
          schema:
            $ref: "#/definitions/httpnotfounderror"
        default:
          description: Unexpected error occurred accessing topic.
          schema:
            $ref: "#/definitions/httperror"

  /contacts:
    get:
      summary: Display All Contact
      description: Queries the database for the records and returns a JSON formatted string containg the point of contact
      operationId: ViewManyContacts
      tags:
      - Contacts
      responses:
        200:
          description: Successfully viewed the Contact.
          schema:
              $ref: "#/definitions/pointofcontactWithId"
        400:
          description: Invalid Topic request.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        404:
          description: Topic not found.
          schema:
            $ref: "#/definitions/httpnotfounderror"
        default:
          description: Unexpected error occurred accessing topic.
          schema:
            $ref: "#/definitions/httperror"
    post:
      summary: Creates A Contact Record
      description: Creates a new contact record from the input fields provided.
      operationId: ContactCreate
      tags:
      - Contacts
      parameters:
        - in: body
          name: topic
          description: "Create a new contact record"
          schema:
             $ref: "#/definitions/pointofcontact"
      responses:
        200:
          description: The contact record was created successfully.
          schema:
            $ref: "#/definitions/pointofcontactWithId"
        400:
          description: Invalid contact create Parameters - no POST body.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        default:
          description: Unexpected error occurred accessing the metadata
          schema:
            $ref: "#/definitions/httperror"    
            
    put:
      summary: Updates A Contact Record
      description: Updates an existing contact  record with the input fields provided for the contactid provided
      operationId: ContactUpdate
      tags:
      - Contacts
      parameters:
        - in: body
          name: pointofcontact
          description: "Update an existing contact record"
          schema:
              $ref: "#/definitions/pointofcontactWithId"
      responses:
        200:
          description: The contact record was updated successfully.
          schema:
              $ref: "#/definitions/pointofcontactWithId"
        400:
          description: Invalid metadata updated Parameters.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        default:
          description: Unexpected error occurred accessing the metadata
          schema:
            $ref: "#/definitions/httperror"           
#===================#
# Metadata View One #
#===================#

  /MetaData/{id}:
    get:
      summary: Display Single Metadata
      description: Queries the database for the specified record and returns a JSON formatted string containg the metadata.
      operationId: ViewOneMetadata
      tags:
      - Metadata
      parameters:
        - name: id
          in: path
          description: Id of the metadata
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Successfully viewed the metadata.
          schema:
              $ref: "#/definitions/metadataWithId"
        400:
          description: Invalid metadata request.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        404:
          description: Metadata not found.
          schema:
            $ref: "#/definitions/httpnotfounderror"
        default:
          description: Unexpected error occurred accessing metadata.
          schema:
            $ref: "#/definitions/httperror"

  /MetaData:
    get:
      summary: Display All Metadata
      description: Queries the database for the specified record and returns a JSON formatted string containg the metadata.
      operationId: ViewAllMetadata
      tags:
      - Metadata
      responses:
        200:
          description: Successfully viewed the metadata.
          schema:
              $ref: "#/definitions/metadataWithId"
        400:
          description: Invalid metadata request.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        404:
          description: Metadata not found.
          schema:
            $ref: "#/definitions/httpnotfounderror"
        default:
          description: Unexpected error occurred accessing metadata.
          schema:
            $ref: "#/definitions/httperror"

    post:
      summary: Creates A Metadata Record
      description: Creates a new metadata record from the input fields provided.
      operationId: MetaDataCreate
      tags:
      - Metadata
      parameters:
        - in: body
          name: metadata
          description: "Create a new metadata record"
          schema:
             $ref: "#/definitions/metadata"
      responses:
        200:
          description: The metadata record was created successfully.
          schema:
            $ref: "#/definitions/metadataWithId"
        400:
          description: Invalid metadata create Parameters - no POST body.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        default:
          description: Unexpected error occurred accessing the metadata
          schema:
            $ref: "#/definitions/httperror"    
    put:
      summary: Updates A Metadata Record
      description: Updates an existing metadata record with the input fields provided for the metadataId provided
      operationId: MetadataUpdate
      tags:
      - Metadata
      parameters:
        - in: body
          name: metadata
          description: "Update an existing metadata record"
          schema:
              $ref: "#/definitions/metadataWithId"
      responses:
        200:
          description: The metadata record was updated successfully.
          schema:
              $ref: "#/definitions/metadataWithId"
        400:
          description: Invalid metadata updated Parameters.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        default:
          description: Unexpected error occurred accessing the metadata
          schema:
            $ref: "#/definitions/httperror"   
      
  /MetaData/Search:      
    get:
      summary: Search Metadata
      description: Searches the data catalog for entries matching the search terms. leaving all parameters blank will return all datasets
      operationId: SearchMetadata
      tags:
      - Metadata
      parameters:
        - $ref: "#/parameters/Keywords"
        - $ref: "#/parameters/MinSize"
        - $ref: "#/parameters/MaxSize"
        - $ref: "#/parameters/MinDate"
        - $ref: "#/parameters/MaxDate"
        - $ref: "#/parameters/Organisations"
        - $ref: "#/parameters/licenses"
        - $ref: "#/parameters/Topics"
   
      responses:
        200:
          description: A list of matching metadata objects.
          schema:
              type: array
              items:
                $ref: "#/definitions/metadataWithId"
        401:
          description: User not authorised to access dataset.
          schema:
            $ref: "#/definitions/httpauthorisationerror"
        404:
          description: Metadata not found.
          schema:
            $ref: "#/definitions/httpnotfounderror"
        default:
          description: Unexpected error occurred accessing metadata.
          schema:
            $ref: "#/definitions/httperror"

  /Jobs/{id}:
    get:
      summary: View Single Status
      description: Queries the data store and returns the status of the retrieval task.
      operationId: RequestStatusViewOne
      tags:
      - Retrieval Task
      parameters:
        - name: id
          in: path
          description: Id of the Job
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Status of the dataset retrieval task.
          schema:
            $ref: "#/definitions/retrievaltaskWithId"
        400:
          description: Invalid status request.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        default:
          description: Unexpected error occurred accessing dataset retrieval task.
          schema:
            $ref: "#/definitions/httperror"
            
  /Jobs:
    get:
      summary: View Many Jobs
      description: Queries the data store and returns the retrieval tasks.
      operationId: JobsViewMany
      tags:
      - Jobs
      responses:
        200:
          description: Status of the dataset retrieval tasks.
          schema:
            type: array
            items:
              $ref: "#/definitions/retrievalTask"
        default:
          description: Unexpected error occurred accessing dataset retrieval tasks.
          schema:
            $ref: "#/definitions/httperror"

    post:
      summary: Creates The Job
      description: Create a new job - status either "Running", "Completed" or "Failed".
      operationId: CreateJob
      tags:
      - Jobs
      parameters:
        - in: body
          name: metadata
          description: "Update an existing metadata record"
          schema:
            $ref: "#/definitions/retrievalTask"
      responses:
        200:
          description: The entire dataset retrieval task including the updated status.
          schema:
            $ref: "#/definitions/retrievaltaskWithId"
        400:
          description: Invalid status request.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        default:
          description: Unexpected error occurred accessing dataset retrieval task.
          schema:
            $ref: "#/definitions/httperror"
            
    put:
      summary: Updates The Job Status
      description: Retrieves the retrieval task from the data store and changes the job status to either "Running", "Completed" or "Failed".
      operationId: UpdateStatus
      tags:
      - Retrieval Task
      parameters:
        - in: body
          name: metadata
          description: "Update an existing metadata record"
          schema:
            $ref: "#/definitions/retrievaltaskWithId"
      responses:
        200:
          description: The entire dataset retrieval task including the updated status.
          schema:
            $ref: "#/definitions/retrievaltaskWithId"
        400:
          description: Invalid status request.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        default:
          description: Unexpected error occurred accessing dataset retrieval task.
          schema:
            $ref: "#/definitions/httperror"


  /StorageInformation/{id}:
    get:
      summary: View Single Storage Information
      description: Queries the data store and returns the storage information of the specified dataset
      operationId: StorageInformationViewOne
      tags:
      - Data Store
      parameters:
        - name: id
          in: path
          description: Id of the storage information record
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: The storage information for the specified dataset.
          schema:
            $ref: "#/definitions/storageinformationWithId"
        400:
          description: Invalid storage information request.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        default:
          description: Unexpected error occurred accessing the storage information.
          schema:
            $ref: "#/definitions/httperror"

  /StorageInformation:
    get:
      summary: View Many Storage Information
      description: Queries the data store and returns the storage information.
      operationId: StorageInformationViewMany
      tags:
      - Data Store
      responses:
        200:
          description: The storage information for the datasets.
          schema:
            type: array
            items:
              $ref: "#/definitions/storageinformationWithId"
        default:
          description: Unexpected error occurred accessing the storage information.
          schema:
            $ref: "#/definitions/httperror"

    post:
      summary: Creates A Storage Information Record
      description: Creates a new storage information record from the input fields provided.
      operationId: StorageInformationCreate
      tags:
      - Data Store
      parameters:
        - in: body
          name: storageinformation
          description: "Update an existing storage information record"
          schema:
            $ref: "#/definitions/storageinformation"
      responses:
        200:
          description: The storage information fwas created successfully.
          schema:
            $ref: "#/definitions/storageinformationWithId"
        400:
          description: Invalid storage information request.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        default:
          description: Unexpected error occurred accessing the storage information.
          schema:
            $ref: "#/definitions/httperror"    

    put:
      summary: Updates A Storage Information Record
      description: Updates an existing storage information record using the input fields provided.
      operationId: StorageInformationUpdate
      tags:
      - Data Store
      parameters:
        - in: body
          name: storageinformation
          description: "Update an existing storage information record"
          schema:
             $ref: "#/definitions/storageinformationWithId"
      responses:
        200:
          description: The storage information fwas created successfully.
          schema:
            $ref: "#/definitions/storageinformationWithId"
        400:
          description: Invalid storage information request.
          schema:
            $ref: "#/definitions/httpbadrequesterror"
        default:
          description: Unexpected error occurred accessing the storage information.
          schema:
            $ref: "#/definitions/httperror" 

###############
# Definitions #
###############

definitions:

#==================#
# HTTP Error Codes #
#==================#

  httperror:
    description: An object returning the HTTP error code and associated information.
    type: object
    properties:
      code:
        description: The HTTP error code showing the failure of the HTTP request.
        type: integer
        format: int64
        example: 0
      message:
        description: Generic, error. A more detailed description of the error.
        type: string
        maxLength: 100
        example: Generic Error Message

  httpbadrequesterror:
    description: An object returning the HTTP error code and associated information.
    type: object
    properties:
      code:
        description: The HTTP error code showing the failure of the HTTP request.
        type: integer
        format: int64
        example: 0
      message:
        description: Bad request. A more detailed description of the error.
        type: string
        maxLength: 100
        example: Bad Request Error Message

  httpauthorisationerror:
    description: An object returning the HTTP error code and associated information.
    type: object
    properties:
      code:
        description: The HTTP error code showing the failure of the HTTP request.
        type: integer
        format: int64
        example: 0
      message:
        description: Not authorised. A more detailed description of the error.
        type: string
        maxLength: 100
        example: Not Authorised Error Message
        
  httpnotfounderror:
    description: An object returning the HTTP error code and associated information.
    type: object
    properties:
      code:
        description: The HTTP error code showing the failure of the HTTP request.
        type: integer
        format: int64
        example: 0
      message:
        description: Not found. A more detailed description of the error.
        type: string
        maxLength: 100
        example: Not Found Error Message

#================#
# Retrieval Task #
#================#

  retrievaltaskWithId:
    description: A storage infotmation record with the Id included
    type: object
    properties:
      id:
        description: The id of the job. Primary key.
        type: integer
        format: int64
        example: 619
      storageinformation:
          $ref: "#/definitions/retrievalTask"
          
  retrievalTask:
    description: A record containing the required information to extract a specific dataset from the database and return it to the user.
    type: object
    properties:
      jobStatus:
        description: the current processing status of the retrieval task.
        type: string
      metadataId:
        description: A numeric identifier linking back to the metadata for the dataset.
        type: integer
        format: int64
      location:
        description: The path/file name where the extracted dataste will be stored.
        type: string
      requestedOn:
        description: The date/time that th request for the dataset was submitted.
        type: string
        format: date-time
      startedOn:
        description: The date/time that the data retrieval task began executing.
        type: string
        format: date-time
      completedOn:
        description: The date/time that the retrieval task was completed/failed.
        type: string
        format: date-time
      appliedFilters:
        description: An array of filtering options to be applied to the dataset.
        type: array
        items:
          $ref: "#/definitions/filterrange"
      contactType:
        description: The type of contact method used to send notifications to the user.
        type: string
        maxLength: 10
      contactDetails:
        description: The name of the account for the specified contact type.
        type: string
        maxLength: 100
    example:
      - jobId: 1
        jobStatus: Completed
        metadataId: 4
        location: /home/user7/file1
        requestedOn: 2018-06-22T10:11:12Z
        startedOn: 2018-07-26T07:03:14.404647Z
        completedOn: 2018-07-26T07:03:32.037101Z
        appliedFilters:
          - heading: Latitude
            minimum: 50.0
            maximum: 55.0
          - heading: Longitude
            minimum: -1.5
            maximum: 1.5
        contactType: email
        contactDetails: fred.smith@my.company.com

#=============================#
# Storage Information with ID #
#=============================#

  storageinformationWithId:
    description: A storage infotmation record with the Id included
    type: object
    properties:
      storageinformationId:
        description: The id of the store information record. Primary key.
        type: integer
        format: int64
        example: 619
      storageinformation:
          $ref: "#/definitions/storageinformation"

#=====================#
# Storage Information #
#=====================#

  storageinformation:
    description: The storage information describing where and how the dataset is stored and in which database.
    type: object
    properties:
      metadataId:
        description: A link to the metadata information stored in the data catalogue.
        type: integer
        format: int64
        example: 37

      databaseHost:
        description: The host of the database
        type: string
        maxLength: 100
        example: http://localhost:8090

      databaseSchema:
        description: The schema of the database
        type: string
        maxLength: 100
        example: testschema

      objectStoreHost:
        description: The host of the object store
        type: string
        maxLength: 100
        example: http://localhost:8090

      objectStoreBucket:
        description: The bucket of the object store
        type: string
        maxLength: 100
        example: testbucket

#==============#
# Filter Range #
#==============#

  filterrange:
    description: Information about a filter applied to a column/row of data. Its name and the minimum and maximum values to filter between.
    type: object
    properties:
      name:
        description: The name of the column/row of data to be filtered.
        type: string
        example: Height
      minimum:
        description: The minimum value accepted by the filter. (stored as a string)
        type: string
        example: 100.0
      maximum:
        description: The maximum value accepted by the filter. (stored as a string)
        type: string
        example: 180.0
#=========#
# license #
#=========#

  license:
    description: A list of valid licenses, creating a defined vocabulary.
    type: object
    properties:
      id:
        description: A unique numeric identifier for each license.
        type: integer
        format: int64
        example: 37
      name:
        description: The name of the licnese.
        type: string  
        maxLength: 50
        example: Apache license 2.0
      url: 
        description: A URL pointing to a copy of the license agreement.
        type: string
        format: uri
        maxLength: 256
        example: https://www.apache.org/licenses/license-2.0.html

  licenseWithoutId:
    description: A list of valid licenses, creating a defined vocabulary.
    type: object
    properties:
      name:
        description: The name of the licnese.
        type: string  
        maxLength: 50
        example: Apache license 2.0
      url: 
        description: A URL pointing to a copy of the license agreement.
        type: string
        format: uri
        maxLength: 256
        example: https://www.apache.org/licenses/license-2.0.html
        
#==============#
# Organisation #
#==============#

  organisation:
    description: The name of the organisation the point of contact belongs to.
    type: object
    properties:
      organisationid:
        description: A unique numeric identifier for each organisation.
        type: integer
        format: int64
        example: 28
      name:
        description: The name of the organisation.
        type: string
        maxLength: 50
        example: Rutherford Appleton Laboratiory

  organisationName:
    description: The name of the organisation the point of contact belongs to.
    type: object
    properties:
      name:
        description: The name of the organisation.
        type: string
        maxLength: 50
        example: Rutherford Appleton Laboratiory
        
#==================#
# Point Of Contact #
#==================#

  pointofcontactWithId:
    description: A point of contact record 
    type: object
    properties:
      id:
        description: The id of the point of contact record. Primary key.
        type: integer
        format: int64
        example: 619
      metadata:
          $ref: "#/definitions/pointofcontact"
          
  pointofcontact:
    description: A person or department to contact for making enquiries.
    type: object
    properties:
      name:
        description: The name of the person or department responsible for the dataset/model.
        type: string
        maxLength: 200
        example: Bob Smith
      emailaddress:
        description: The email address of the person/department.
        type: string
        format: email
        example: enquiries@stfc.ac.uk
      organisation:
        $ref: "#/definitions/organisation"

#=======#
# Topic #
#=======#

  topic:
    description: A word describing a general areas of work/research.
    type: object
    properties:
      id:
        description: A unique numeric identifier for each topic.
        type: integer
        format: int64
        example: 5
      name:
        description: The name of the topic.
        type: string
        maxLength: 200
        example: Business

  metadataWithId:
    description: A metadata record for describing a dataset or model stored inm the NID.
    type: object
    properties:
      metadataId:
        description: The id of the metadata record. Primary key.
        type: integer
        format: int64
        example: 619
      metadata:
          $ref: "#/definitions/metadata"
        

#==========#
# Metadata #
#==========#

  metadata:
    description: A metadata record for describing a dataset or model stored inm the NID.
    type: object
    properties:
    
# Common Fields

      parentId:
        description: A link to an existing dataset that this one was derived from.
        type: integer
        format: int64
        example: 27
      title:
        description: The title of the dataset/model.
        type: string
        maxLength: 100
        example: Oxford population data from 1980.
      topic:
        $ref: "#/definitions/topic"
      version:
        description: The version identifier for this dataset/model.
        type: string
        maxLength: 20
        example: 1.0.3
      lastUpdated:
        description: The date of when this dataset was created/modified.
        type: string
        format: date
        example: 01/06/2018
      pointOfContact:
        $ref: "#/definitions/pointofcontact"
      licenses:
        description: The license agreements governing the dataset/model.
        type: array
        items:
          $ref: "#/definitions/license"
        example: GNU General Public license v3.0, Apache license Version 2.0
      summary:
        description: A few sentences describing the dataset/model.
        maxLength: 1000
        type: string
        example: This population data provides information on various social characteristics of the region.
 
 # Dataset Specific Fields
 
      fileFormat:
        description: Describes the file format of the dataset.
        type: string
        maxLength: 20
        example: ASCII
      units:
        description: Describes the unit system that the data is measured in.
        type: string
        maxLength: 50
        example: kgms^-2
      numberRows:
        description: The number of rows of data in the table.
        type: integer
        format: int64
        example: 4
      tags:
        description: A collection of keywords describing the dataset to aid in searching for relevant datasets.
        type: string
        example: population, Oxford, 1980, water
      additionalProperties:
        description: A collection of key/value pairs describing additional propeties of the dataset/model.
        type: object
        additionalProperties:
          type: string
        example:
          latitude: 51.7520° N
          longitude: 1.2577° W
          land_area: 45.59 km²
          founded: 8th century
          city_status: 1542
          lord_mayor: Councillor Jean Fooks
      

##########################################
# Any reusable parameters should go here #
##########################################

parameters:
  OrganisationId:
    name: organisationId
    in: query
    description: Id of organisation record.
    required: true
    type: integer
    format: int64
    
  licenseId:
    name: id
    in: query
    description: Id of license record.
    required: true
    type: integer
    format: int64
    
  TopicId:
    name: id
    in: query
    description: Id of topic record.
    required: true
    type: integer
    format: int64
    
  PointOfContactId:
    name: id
    in: query
    description: Id of contact record.
    required: true
    type: integer
    format: int64
    
  MetaDataId:
    name: id
    in: query
    description: Id of metadata record.
    required: true
    type: integer
    format: int64
    
  Keywords: 
    name: keywords
    in: query
    description: A keyword to search against the various fields.
    required: false
    type: string
    
  MinSize:
    name: minsize
    in: query
    description: The minimum number of columns in the data.
    required: false
    type: integer
    format: int64
  
  MaxSize:
    name: maxsize
    in: query
    description: The maximum number of columns in the data.
    required: false
    type: integer
    format: int64
    
  MinDate:
    name: mindate
    in: query
    description: The minimum date that the dataset could be published from.
    required: false
    type: string
    format: date-time
  
  MaxDate:
    name: maxdate
    in: query
    description: The maximum date the dataset could be published up to.
    required: false
    type: string
    format: date-time
    
  Organisations:
    name: organisations
    in: query
    description: The name of the organisation which manaegs the dataset.
    required: false
    type: string
    
  licenses:
    name: licenses
    in: query
    description: The name of the license which governs access to the dataset.
    required: false
    type: string
    
  Topics:
    name: topics
    in: query
    description: The general topic which covers the field of work associated with the dataset.
    required: false
    type: string

  Location:  
    name: location
    in: query
    description: The path/file location to store the retrieved dataset.
    required: true
    type: string

  FilterName:
    name: filterName
    in: query
    description: The name of the column/row to filter on.
    required: false
    type: string

  FilterMinimum:
    name: filterMinimum
    in: query
    description: The minimum value to apply to the filter.
    required: false
    type: string

  FilterMaximum:
    name: filterMaximum
    in: query
    description: The maximum value to apply to the filter.
    required: false
    type: string

  JobId:
    name: id
    in: query
    description: Job id of the dataset retrieval task.
    required: true
    type: integer
    format: int64
    
  JobStatus:
    name: jobStatus
    in: query
    description: The updated job status of the retrieval task.
    required: True  
    type: string

  StorageInfoId:
    name: id
    in: query
    description: Job id of the dataset retrieval task.
    required: true
    type: integer
    format: int64
    